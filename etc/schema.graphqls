# Landofcoder
#
# NOTICE OF LICENSE
#
# This source file is subject to the Landofcoder.com license that is
# available through the world-wide-web at this URL:
# https://landofcoder.com/LICENSE.txt
#
# DISCLAIMER
#
# Do not edit or add to this file if you wish to upgrade this extension to newer
# version in the future.
#
# @category    Landofcoder
# @package     Lof_MarketplaceGraphQl
# @copyright   Copyright (c) Landofcoder (https://landofcoder.com/)
# @license     https://landofcoder.com/LICENSE.txt

enum UrlRewriteEntityTypeEnum {
    LOF_MARKETPLACE
}

type Query {
    lofSellerById(
        seller_id: Int! @doc(description: "Seller id")
    ): Seller @resolver(class: "\\Lof\\MarketplaceGraphQl\\Model\\Resolver\\SellerById") @doc(description: "Get Seller by ID")

    lofSellerByProduct(
        product_sku: String! @doc(description: "Product SKU")
    ): Seller @resolver(class: "\\Lof\\MarketplaceGraphQl\\Model\\Resolver\\SellerByProduct") @doc(description: "Get Seller by ID")

    lofProductBySellerId(
        seller_id: Int! @doc(description: "Seller id")
        search: String @doc(description: "Performs a full-text search using the specified key words."),
        filter: ProductAttributeFilterInput @doc(description: "Identifies which product attributes to search for and return."),
        pageSize: Int = 20 @doc(description: "Specifies the maximum number of results to return at once. This attribute is optional."),
        currentPage: Int = 1 @doc(description: "Specifies which page of results to return. The default value is 1."),
        sort: ProductAttributeSortInput @doc(description: "Specifies which attributes to sort on, and whether to return the results in ascending or descending order.")
    ): Products @resolver(class: "\\Lof\\MarketplaceGraphQl\\Model\\Resolver\\ProductBySellerId") @doc(description: "Get Product by Seller ID")

    lofProductList(
        search: String @doc(description: "Performs a full-text search using the specified key words."),
        filter: ProductAttributeFilterInput @doc(description: "Identifies which product attributes to search for and return."),
        pageSize: Int = 20 @doc(description: "Specifies the maximum number of results to return at once. This attribute is optional."),
        currentPage: Int = 1 @doc(description: "Specifies which page of results to return. The default value is 1."),
        sort: ProductAttributeSortInput @doc(description: "Specifies which attributes to sort on, and whether to return the results in ascending or descending order.")
       ):Products @resolver(class: "\\Lof\\MarketplaceGraphQl\\Model\\Resolver\\ProductSellers") @doc(description: "The seller product query searches for seller products that match the criteria specified in the search and filter attributes")

    lofSellerList(
       filter: SellerFilterInput @doc(description: "Identifies which question attributes to search for and return."),
       pageSize: Int = 5 @doc(description: "Specifies the maximum number of results to return at once. This attribute is optional."),
       currentPage: Int = 1 @doc(description: "Specifies which page of results to return. The default value is 1."),
   ):Sellers @resolver(class: "\\Lof\\MarketplaceGraphQl\\Model\\Resolver\\Sellers") @doc(description: "The seller query searches for sellers that match the criteria specified in the search and filter attributes")
}

type Mutation {

    LofMkpCreateSeller(input: SellerInput!): Res @resolver(class: "\\Lof\\MarketplaceGraphQl\\Model\\Resolver\\CreateSeller") @doc(description: "Create a new Seller")

    LofMkpCreateCustomerSeller(input: SellerCustomerInput!): Res @resolver(class: "\\Lof\\MarketplaceGraphQl\\Model\\Resolver\\CreateCustomerSeller") @doc(description: "Create a new Seller before create customer account")

}

type SellerRate {
    rating_id: Int @doc(description: "Rating ID")
    seller_id: Int @doc(description: "Seller ID")
    customer_id: Int @doc(description: "Customer ID")
    rate1: Int @doc(description: "Rate 1")
    rate2: Int @doc(description: "Rate 2")
    rate3: Int @doc(description: "Rate 3")
    email: String @doc(description: "Email")
    title: String @doc(description: "Title")
    status: String @doc(description: "Status")
    detail: String @doc(description: "Detail")
    nickname: String @doc(description: "Nick Name")
    created_at: String @doc(description: "Created At")
}

type Seller {
    seller_id: Int @doc(description: "Seller ID")
    contact_number: String @doc(description: "Phone Number")
    shop_title: String @doc(description: "Shop Title")
    company_locality: String @doc(description: "Company Locality")
    company_description: String @doc(description: "Company Description")
    return_policy: String @doc(description: "Return Policy")
    shipping_policy: String @doc(description: "Shipping Policy")
    address: String @doc(description: "Address")
    country: String @doc(description: "Country")
    image: String @doc(description: "Image")
    thumbnail: String @doc(description: "Thumbnail")
    city: String @doc(description: "City")
    region: String @doc(description: "Region")
    group: String @doc(description: "Group")
    url: String @doc(description: "Shop Url")
    customer_id: Int @doc(description: "Customer Id")
    email: String @doc(description: "Email")
    name: String @doc(description: "Name")
    sale: String @doc(description: "Sale")
    commission_id: String @doc(description: "Commission Id")
    page_layout: String @doc(description: "Page Layout")
    status: Int @doc(description: "Status")
    position: Int @doc(description: "Position")
    twitter_id: Int @doc(description: "Twitter Id")
    facebook_id: Int @doc(description: "Facebook Id")
    gplus_id: Int @doc(description: "Gplus Id")
    youtube_id: Int @doc(description: "Youtube Id")
    vimeo_id: Int @doc(description: "Vimeo Id")
    instagram_id: Int @doc(description: "Instagram Id")
    pinterest_id: Int @doc(description: "Pinterest Id")
    linkedin_id: Int @doc(description: "Linkedin Id")
    tw_active: Int @doc(description: "Tw Active")
    fb_active: Int @doc(description: "Fb Active")
    gplus_active: Int @doc(description: "Gplus Active")
    vimeo_active: Int @doc(description: "Vimeo Active")
    instagram_active: Int @doc(description: "Instagram Active")
    pinterest_active: Int @doc(description: "Pinterest Active")
    linkedin_active: Int @doc(description: "Linkedin Active")
    banner_pic: String @doc(description: "Banner Pic")
    shop_url: String @doc(description: "Shop Url")
    logo_pic: String @doc(description: "Logo Pic")
    store_id: [Int] @doc(description: "Store Id")
    seller_rates: SellerRates @doc(description: "Seller Rates")
    products: Products @doc(description: "Products")
}
type Sellers {
    total_count: Int @doc(description: "The number of sellers returned")
    items: [Seller] @doc(description: "An array of sellers that match the specified search criteria")
}

type Products {
    total_count: Int @doc(description: "The number of seller products returned")
    items: [ProductInterface] @doc(description: "An array of seller products that match the specified search criteria")
}

type SellerRates {
    total_count: Int @doc(description: "The number of seller rates returned")
    items: [SellerRate] @doc(description: "An array of seller rates")
}

input SellerFilterInput {
    seller_id: FilterTypeInput @doc(description: "Seller ID")
    name: FilterTypeInput @doc(description: "Name")
    status: FilterTypeInput @doc(description: "Status")
    email: FilterTypeInput @doc(description: "Email")
    or: SellerFilterInput @doc(description: "The keyword required to perform a logical OR comparison")
}

input SellerProductFilterInput {
    name: FilterTypeInput @doc(description: "Name")
    type_id: FilterTypeInput @doc(description: "Type")
    price: FilterTypeInput @doc(description: "Price")
    created_at: FilterTypeInput @doc(description: "Created At")
    approval: FilterTypeInput @doc(description: "Approval")
    sku: FilterTypeInput @doc(description: "SKU")
    or: SellerFilterInput @doc(description: "The keyword required to perform a logical OR comparison")
}
type SellerProducts {
    total_count: Int @doc(description: "The number of seller products returned")
    items: [SellerProduct] @doc(description: "An array of seller products")
}

type SellerProduct {
    product_id: Int @doc(description: "Product Id")
    product_name: String @doc(description: "Product Name")
    status: Int @doc(description: "Status")
    store_id: Int @doc(description: "Store Id")
}

type Res {
    code: String
    message: String
}

interface ProductInterface {
    seller: Seller @doc(description: "Seller who sell this product") @resolver(class: "\\Lof\\MarketplaceGraphQl\\Model\\Resolver\\ProductAttributeSetSellerResolver")
}

input ProductFilterInput @doc(description: "ProductFilterInput is deprecated, use @ProductAttributeFilterInput instead. ProductFilterInput defines the filters to be used in the search. A filter contains at least one attribute, a comparison operator, and the value that is being searched for.") {
    name: FilterTypeInput @doc(description: "The product name. Customers use this name to identify the product.")
    sku: FilterTypeInput @doc(description: "A number or code assigned to a product to identify the product, options, price, and manufacturer.")
    description: FilterTypeInput @doc(description: "Detailed information about the product. The value can include simple HTML tags.")
    short_description: FilterTypeInput @doc(description: "A short description of the product. Its use depends on the theme.")
    price: FilterTypeInput @doc(description: "The price of an item.")
    special_price: FilterTypeInput @doc(description: "The discounted price of the product. Do not include the currency code.")
    special_from_date: FilterTypeInput @doc(description: "The beginning date that a product has a special price.")
    special_to_date: FilterTypeInput @doc(description: "The end date that a product has a special price.")
    weight: FilterTypeInput @doc(description: "The weight of the item, in units defined by the store.")
    manufacturer: FilterTypeInput @doc(description: "A number representing the product's manufacturer.")
    meta_title: FilterTypeInput @doc(description: "A string that is displayed in the title bar and tab of the browser and in search results lists.")
    meta_keyword: FilterTypeInput @doc(description: "A comma-separated list of keywords that are visible only to search engines.")
    meta_description: FilterTypeInput @doc(description: "A brief overview of the product for search results listings, maximum 255 characters.")
    image: FilterTypeInput @doc(description: "The relative path to the main image on the product page.")
    small_image: FilterTypeInput @doc(description: "The relative path to the small image, which is used on catalog pages.")
    thumbnail: FilterTypeInput @doc(description: "The relative path to the product's thumbnail image.")
    tier_price: FilterTypeInput @doc(description: "The price when tier pricing is in effect and the items purchased threshold has been reached.")
    news_from_date: FilterTypeInput @doc(description: "The beginning date for new product listings, and determines if the product is featured as a new product.")
    news_to_date: FilterTypeInput @doc(description: "The end date for new product listings.")
    custom_layout_update: FilterTypeInput @doc(description: "XML code that is applied as a layout update to the product page.")
    min_price: FilterTypeInput @doc(description:"The numeric minimal price of the product. Do not include the currency code.")
    max_price: FilterTypeInput @doc(description:"The numeric maximal price of the product. Do not include the currency code.")
    category_id: FilterTypeInput @doc(description: "Category ID the product belongs to.")
    options_container: FilterTypeInput @doc(description: "If the product has multiple options, determines where they appear on the product page.")
    required_options: FilterTypeInput @doc(description: "Indicates whether the product has required options.")
    has_options: FilterTypeInput @doc(description: "Indicates whether additional attributes have been created for the product.")
    image_label: FilterTypeInput @doc(description: "The label assigned to a product image.")
    small_image_label: FilterTypeInput @doc(description: "The label assigned to a product's small image.")
    thumbnail_label: FilterTypeInput @doc(description: "The label assigned to a product's thumbnail image.")
    created_at: FilterTypeInput @doc(description: "Timestamp indicating when the product was created.")
    updated_at: FilterTypeInput @doc(description: "Timestamp indicating when the product was updated.")
    country_of_manufacture: FilterTypeInput @doc(description: "The product's country of origin.")
    custom_layout: FilterTypeInput @doc(description: "The name of a custom layout.")
    gift_message_available: FilterTypeInput @doc(description: "Indicates whether a gift message is available.")
    or: ProductFilterInput @doc(description: "The keyword required to perform a logical OR comparison.")
}

input SellerCustomerInput {
    seller: SellerInput!
    customer: CustomerDataInput!
    password: String!
    or: SellerCustomerInput
}

input SellerInput {
    group_id  : String!
    url_key  : String!
}

input CustomerDataInput {
    firstname: String!
    lastname: String!
    email: String!
    address: AddressInput
}

input AddressInput {
    region_id: String
    country_id: String!
    city: String!
    street: String!
    company: String
    telephone: String!
    postcode: String!
    or: AddressInput
}

