# Landofcoder
#
# NOTICE OF LICENSE
#
# This source file is subject to the Landofcoder.com license that is
# available through the world-wide-web at this URL:
# https://landofcoder.com/LICENSE.txt
#
# DISCLAIMER
#
# Do not edit or add to this file if you wish to upgrade this extension to newer
# version in the future.
#
# @category    Landofcoder
# @package     Lof_MarketplaceGraphQl
# @copyright   Copyright (c) Landofcoder (https://landofcoder.com/)
# @license     https://landofcoder.com/LICENSE.txt

enum UrlRewriteEntityTypeEnum {
    LOF_MARKETPLACE
}

type Query {
    lofSellerById(
        seller_id: Int! @doc(description: "Seller id")
    ): Seller @resolver(class: "\\Lof\\MarketplaceGraphQl\\Model\\Resolver\\SellerById") @doc(description: "Get Seller by ID")
    lofProductBySellerId(
        seller_id: Int! @doc(description: "Seller id")
    ): Products @resolver(class: "\\Lof\\MarketplaceGraphQl\\Model\\Resolver\\ProductBySellerId") @doc(description: "Get Product by Seller ID")
    lofProductList(
           filter: SellerProductFilterInput @doc(description: "Identifies which question attributes to search for and return."),
           pageSize: Int = 5 @doc(description: "Specifies the maximum number of results to return at once. This attribute is optional."),
           currentPage: Int = 1 @doc(description: "Specifies which page of results to return. The default value is 1."),
       ):Products @resolver(class: "\\Lof\\MarketplaceGraphQl\\Model\\Resolver\\ProductSellers") @doc(description: "The seller product query searches for seller products that match the criteria specified in the search and filter attributes")

    lofSellerList(
       filter: SellerFilterInput @doc(description: "Identifies which question attributes to search for and return."),
       pageSize: Int = 5 @doc(description: "Specifies the maximum number of results to return at once. This attribute is optional."),
       currentPage: Int = 1 @doc(description: "Specifies which page of results to return. The default value is 1."),
   ):Sellers @resolver(class: "\\Lof\\MarketplaceGraphQl\\Model\\Resolver\\Sellers") @doc(description: "The seller query searches for sellers that match the criteria specified in the search and filter attributes")
}

type Seller {
    seller_id: Int @doc(description: "Seller ID")
    contact_number: String @doc(description: "Phone Number")
    shop_title: String @doc(description: "Shop Title")
    company_locality: String @doc(description: "Company Locality")
    company_description: String @doc(description: "Company Description")
    return_policy: String @doc(description: "Return Policy")
    shipping_policy: String @doc(description: "Shipping Policy")
    address: String @doc(description: "Address")
    country: String @doc(description: "Country")
    image: String @doc(description: "Image")
    thumbnail: String @doc(description: "Thumbnail")
    city: String @doc(description: "City")
    region: String @doc(description: "Region")
    group: String @doc(description: "Group")
    url: String @doc(description: "Shop Url")
    customer_id: Int @doc(description: "Customer Id")
    email: String @doc(description: "Email")
    name: String @doc(description: "Name")
    sale: String @doc(description: "Sale")
    commission_id: String @doc(description: "Commission Id")
    page_layout: String @doc(description: "Page Layout")
    status: Int @doc(description: "Status")
    position: Int @doc(description: "Position")
    twitter_id: Int @doc(description: "Twitter Id")
    facebook_id: Int @doc(description: "Facebook Id")
    gplus_id: Int @doc(description: "Gplus Id")
    youtube_id: Int @doc(description: "Youtube Id")
    vimeo_id: Int @doc(description: "Vimeo Id")
    instagram_id: Int @doc(description: "Instagram Id")
    pinterest_id: Int @doc(description: "Pinterest Id")
    linkedin_id: Int @doc(description: "Linkedin Id")
    tw_active: Int @doc(description: "Tw Active")
    fb_active: Int @doc(description: "Fb Active")
    gplus_active: Int @doc(description: "Gplus Active")
    vimeo_active: Int @doc(description: "Vimeo Active")
    instagram_active: Int @doc(description: "Instagram Active")
    pinterest_active: Int @doc(description: "Pinterest Active")
    linkedin_active: Int @doc(description: "Linkedin Active")
    banner_pic: String @doc(description: "Banner Pic")
    shop_url: String @doc(description: "Shop Url")
    logo_pic: String @doc(description: "Logo Pic")
    store_id: String @doc(description: "Store Id")
}
type Sellers {
    total_count: Int @doc(description: "The number of sellers returned")
    items: [Seller] @doc(description: "An array of sellers that match the specified search criteria")
}

type Products {
    total_count: Int @doc(description: "The number of seller products returned")
    items: [ProductSeller] @doc(description: "An array of seller products that match the specified search criteria")
}

input SellerFilterInput {
    seller_id: FilterTypeInput @doc(description: "Seller ID")
    name: FilterTypeInput @doc(description: "Name")
    status: FilterTypeInput @doc(description: "Status")
    email: FilterTypeInput @doc(description: "Email")
    or: SellerFilterInput @doc(description: "The keyword required to perform a logical OR comparison")
}

input SellerProductFilterInput {
    seller_id: FilterTypeInput @doc(description: "Seller ID")
    product_name: FilterTypeInput @doc(description: "Name")
    type_id: FilterTypeInput @doc(description: "Type")
    price: FilterTypeInput @doc(description: "Email")
    created_at: FilterTypeInput @doc(description: "Created At")
    approval: FilterTypeInput @doc(description: "Approval")
    sku: FilterTypeInput @doc(description: "SKU")
    or: SellerFilterInput @doc(description: "The keyword required to perform a logical OR comparison")
}

type ProductSeller {
    entity_id: Int @doc(description: "Entity ID")
    type_id: String @doc(description: "Type")
    sku: String @doc(description: "SKU")
    has_options: Int @doc(description: "has_options")
    required_options: Int @doc(description: "Required Options")
    created_at: String @doc(description: "Created At")
    updated_at: String @doc(description: "Updated At")
    seller_id: Int @doc(description: "Seller Id")
    approval: Int @doc(description: "Approval")
    name: String @doc(description: "Name")
    price: Float @doc(description: "Price")
    attribute_set_id: Int @doc(description: "Attribute Set Id")
}


